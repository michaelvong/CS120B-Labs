/*	Author: Michael Vong
 *  Partner(s) Name: none
 *	Lab Section:
 *	Assignment: Lab 9  Exercise 1
 *	Exercise Description: [optional - include for your own benefit]
 *      Demo:
 *	I acknowledge all content contained herein, excluding template or example
 *	code, is my own original work.
 */
#include <avr/io.h>
#ifdef _SIMULATE_
#include "simAVRHeader.h"
#include <avr/interrupt.h>
#endif

void set_PWM(double frequency) {
	static double current_frequency;
	if (frequency != current_frequency) {
		if (!frequency) { TCCR3B &= 0x08; }
		else { TCCR3B |= 0x03; }
		if (frequency < 0.954) { OCR3A = 0xFFFF; }
		else if (frequency > 31250) { OCR3A = 0x0000; }
		else { OCR3A = (short) (8000000 / (128 * frequency)) -1; }
		TCNT3 = 0;
		current_frequency = frequency;
	}
}

void PWM_on() {
	TCCR3A = (1 << COM3A0);
	TCCR3B = (1 << WGM32) | (1 << CS31) | (1 << CS30);
	set_PWM(0);
}

void PWM_off() {
	TCCR3A = 0x00;
	TCCR3B = 0x00;
}

enum States{start, init, add, sub, power, release} state;
double frequency[8] = {261.63, 293.66, 329.63, 349.23, 392.00, 440.00, 493.88, 523.25};

unsigned char freq = 0x00;
unsigned char pwr;

void Tick(){
	switch(state){
		case start:
			state = init;
			break;
		case init:
			if ((~PINA & 0x07) == 0x01){
				state = power;
			}
			else if ((~PINA & 0x07) == 0x02){
				state = add;
			}
			else if ((~PINA & 0x07) == 0x04){
				state = sub;
			}
			else {
				state = init;
			}
			break;
		case add:
			state = release;
			break;
		case sub:
			state = release;
			break;
		case power:
			state = release;
			break;
		case release:
			if ((~PINA & 0x07) == 0x00){
				state = init;
			}
			else {
				state = release;
			}
			break;
		default: 
			break;
	}

	switch (state){
		case start: 
			pwr = 0;
			break;
		case init:
			break;
		case add:
			if (freq < 0x07) {
				freq++;
			}
			if (pwr == 0x01){
				set_PWM(frequency[freq]);
			}
			break;
		case sub:
			if (freq > 0x00) {
				freq--;
			}
			if (pwr == 0x01) {
				set_PWM(frequency[freq]);
			}
			break;
		case power:
			if (pwr == 0){
				set_PWM(frequency[freq]);
			}
			else if (pwr == 1){
				set_PWM(0);
				power = 0x00;
			}
			break;
		case release:
			break;
		default:
			break;
	}
}

int main(void) {
    /* Insert DDR and PORT initializations */
    DDRB = 0x40;
    PORTB = 0x00;
    DDRA = 0x00;
    PORTA = 0xFF;
    DDRD = 0xFF;
    PORTD = 0x00;
    /* Insert your solution below */
    PWM_on();
    state = start;
    while (1) {
	    Tick();
	}
    PWM_off();
	
    return 0;
}
